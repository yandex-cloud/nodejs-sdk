/* eslint-disable max-len */
type ServicesConfig = Record<string, Record<string, { importClassName: string; exportClassName?: string; }>>;

export const servicesConfig: ServicesConfig = {
    ai: {
        stt: { importClassName: 'SttServiceClient' },
        translate_translation: { importClassName: 'TranslationServiceClient' },
        tts: { importClassName: 'SynthesizerClient' },
        vision: { importClassName: 'VisionServiceClient' },
    },
    apploadbalancer: {
        backend_group: { importClassName: 'BackendGroupServiceClient' },
        http_router: { importClassName: 'HttpRouterServiceClient' },
        load_balancer: { importClassName: 'LoadBalancerServiceClient' },
        target_group: { importClassName: 'TargetGroupServiceClient', exportClassName: 'AlbTargetGroupServiceClient' },
        virtual_host: { importClassName: 'VirtualHostServiceClient' },
    },
    billing: {
        billing_account: { importClassName: 'BillingAccountServiceClient' },
        budget: { importClassName: 'BudgetServiceClient' },
        customer: { importClassName: 'CustomerServiceClient' },
        service: { importClassName: 'ServiceServiceClient' },
        sku: { importClassName: 'SkuServiceClient' },
    },
    cdn: {
        cache: { importClassName: 'CacheServiceClient' },
        origin_group: { importClassName: 'OriginGroupServiceClient' },
        origin: { importClassName: 'OriginServiceClient' },
        provider: { importClassName: 'ProviderServiceClient' },
        resource: { importClassName: 'ResourceServiceClient' },
    },
    certificatemanager: {
        certificate_content: { importClassName: 'CertificateContentServiceClient' },
        certificate: { importClassName: 'CertificateServiceClient' },
    },
    compute: {
        disk_placement_group: { importClassName: 'DiskPlacementGroupServiceClient' },
        disk: { importClassName: 'DiskServiceClient' },
        disk_type: { importClassName: 'DiskTypeServiceClient' },
        filesystem: { importClassName: 'FilesystemServiceClient' },
        host_group: { importClassName: 'HostGroupServiceClient' },
        host_type: { importClassName: 'HostTypeServiceClient' },
        image: { importClassName: 'ImageServiceClient', exportClassName: 'ComputeImageServiceClient' },
        instance: { importClassName: 'InstanceServiceClient' },
        placement_group: { importClassName: 'PlacementGroupServiceClient' },
        snapshot: { importClassName: 'SnapshotServiceClient' },
        zone: { importClassName: 'ZoneServiceClient' },
        instance_group: { importClassName: 'InstanceGroupServiceClient' },
    },
    containerregistry: {
        image: { importClassName: 'ImageServiceClient', exportClassName: 'CrImageServiceClient' },
        lifecycle_policy: { importClassName: 'LifecyclePolicyServiceClient' },
        registry: { importClassName: 'RegistryServiceClient' },
        repository: { importClassName: 'RepositoryServiceClient' },
        scanner: { importClassName: 'ScannerServiceClient' },
    },
    dataproc: {
        cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'DataProcClusterServiceClient' },
        job: { importClassName: 'JobServiceClient' },
        resource_preset: { importClassName: 'ResourcePresetServiceClient' },
        subcluster: { importClassName: 'SubclusterServiceClient' },
        manager_job: { importClassName: 'JobServiceClient', exportClassName: 'ManagerJobServiceClient' },
        manager: { importClassName: 'DataprocManagerServiceClient' },
    },
    datasphere: {
        app_token: { importClassName: 'AppTokenServiceClient' },
        folder_budget: { importClassName: 'FolderBudgetServiceClient' },
        node: { importClassName: 'NodeServiceClient' },
        project_data: { importClassName: 'ProjectDataServiceClient' },
        project: { importClassName: 'ProjectServiceClient' },
    },
    datatransfer: {
        endpoint: { importClassName: 'EndpointServiceClient' },
        transfer: { importClassName: 'TransferServiceClient' },
    },
    dns: { dns_zone: { importClassName: 'DnsZoneServiceClient' } },
    endpoint: {
        api_endpoint: { importClassName: 'ApiEndpointServiceClient' },
    },
    iam: {
        api_key: { importClassName: 'ApiKeyServiceClient' },
        iam_token: { importClassName: 'IamTokenServiceClient' },
        key: { importClassName: 'KeyServiceClient' },
        role: { importClassName: 'RoleServiceClient' },
        service_account: { importClassName: 'ServiceAccountServiceClient' },
        user_account: { importClassName: 'UserAccountServiceClient' },
        yandex_passport_user_account: { importClassName: 'YandexPassportUserAccountServiceClient' },
        access_key: { importClassName: 'AccessKeyServiceClient' },
    },
    iot: {
        devices_device_data: { importClassName: 'DeviceDataServiceClient' },
        devices_device: { importClassName: 'DeviceServiceClient' },
        devices_registry_data: { importClassName: 'RegistryDataServiceClient' },
        devices_registry: { importClassName: 'RegistryServiceClient', exportClassName: 'IotRegistryServiceClient' },
    },
    k8s: {
        cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'K8sClusterServiceClient' },
        node_group: { importClassName: 'NodeGroupServiceClient' },
        version: { importClassName: 'VersionServiceClient' },
    },
    kms: {
        symmetric_crypto: { importClassName: 'SymmetricCryptoServiceClient' },
        symmetric_key: { importClassName: 'SymmetricKeyServiceClient' },
    },
    loadbalancer: {
        network_load_balancer: { importClassName: 'NetworkLoadBalancerServiceClient' },
        target_group: { importClassName: 'TargetGroupServiceClient' },
    },
    lockbox: {
        payload: { importClassName: 'PayloadServiceClient' },
        secret: { importClassName: 'SecretServiceClient' },
    },
    logging: {
        log_group: { importClassName: 'LogGroupServiceClient' },
        log_ingestion: { importClassName: 'LogIngestionServiceClient' },
        log_reading: { importClassName: 'LogReadingServiceClient' },
    },
    marketplace: {
        image_product_usage: { importClassName: 'ImageProductUsageServiceClient' },
    },
    mdb: {
        clickhouse_backup: { importClassName: 'BackupServiceClient', exportClassName: 'ClickHouseBackupServiceClient' },
        clickhouse_cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'ClickHouseClusterServiceClient' },
        clickhouse_database: { importClassName: 'DatabaseServiceClient' },
        clickhouse_format_schema: { importClassName: 'FormatSchemaServiceClient' },
        clickhouse_ml_model: { importClassName: 'MlModelServiceClient' },
        clickhouse_resource_preset: { importClassName: 'ResourcePresetServiceClient', exportClassName: 'ClickHouseResourcePresetServiceClient' },
        clickhouse_user: { importClassName: 'UserServiceClient', exportClassName: 'ClickHouseUserServiceClient' },
        clickhouse_versions: { importClassName: 'VersionsServiceClient' },
        elasticsearch_auth: { importClassName: 'AuthServiceClient' },
        elasticsearch_cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'ElasticClusterServiceClient' },
        elasticsearch_resource_preset: { importClassName: 'ResourcePresetServiceClient', exportClassName: 'ElasticResourcePresetServiceClient' },
        elasticsearch_user: { importClassName: 'UserServiceClient', exportClassName: 'ElasticUserServiceClient' },
        greenplum_cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'GreenplumClusterServiceClient' },
        kafka_cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'KafkaClusterServiceClient' },
        kafka_connector: { importClassName: 'ConnectorServiceClient' },
        kafka_resource_preset: { importClassName: 'ResourcePresetServiceClient', exportClassName: 'KafkaResourcePresetServiceClient' },
        kafka_topic: { importClassName: 'TopicServiceClient' },
        kafka_user: { importClassName: 'UserServiceClient', exportClassName: 'KafkaUserServiceClient' },
        mongodb_backup: { importClassName: 'BackupServiceClient', exportClassName: 'MongoBackupServiceClient' },
        mongodb_cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'MongoClusterServiceClient' },
        mongodb_database: { importClassName: 'DatabaseServiceClient', exportClassName: 'MongoDatabaseServiceClient' },
        mongodb_resource_preset: { importClassName: 'ResourcePresetServiceClient', exportClassName: 'MongoResourcePresetServiceClient' },
        mongodb_user: { importClassName: 'UserServiceClient', exportClassName: 'MongoUserServiceClient' },
        mysql_backup: { importClassName: 'BackupServiceClient', exportClassName: 'MysqlBackupServiceClient' },
        mysql_cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'MysqlClusterServiceClient' },
        mysql_database: { importClassName: 'DatabaseServiceClient', exportClassName: 'MysqlDatabaseServiceClient' },
        mysql_resource_preset: { importClassName: 'ResourcePresetServiceClient', exportClassName: 'MysqlResourcePresetServiceClient' },
        mysql_user: { importClassName: 'UserServiceClient', exportClassName: 'MysqlUserServiceClient' },
        postgresql_backup: { importClassName: 'BackupServiceClient', exportClassName: 'PgsqlBackupServiceClient' },
        postgresql_cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'PgsqlClusterServiceClient' },
        postgresql_database: { importClassName: 'DatabaseServiceClient', exportClassName: 'PgsqlDatabaseServiceClient' },
        postgresql_resource_preset: { importClassName: 'ResourcePresetServiceClient', exportClassName: 'PgsqlResourcePresetServiceClient' },
        postgresql_user: { importClassName: 'UserServiceClient', exportClassName: 'PgsqlUserServiceClient' },
        redis_backup: { importClassName: 'BackupServiceClient', exportClassName: 'RedisBackupServiceClient' },
        redis_cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'RedisClusterServiceClient' },
        redis_resource_preset: { importClassName: 'ResourcePresetServiceClient', exportClassName: 'RedisResourcePresetServiceClient' },
        sqlserver_backup: { importClassName: 'BackupServiceClient', exportClassName: 'SqlServerBackupServiceClient' },
        sqlserver_cluster: { importClassName: 'ClusterServiceClient', exportClassName: 'SqlServerClusterServiceClient' },
        sqlserver_database: { importClassName: 'DatabaseServiceClient', exportClassName: 'SqlServerDatabaseServiceClient' },
        sqlserver_resource_preset: { importClassName: 'ResourcePresetServiceClient', exportClassName: 'SqlServerResourcePresetServiceClient' },
        sqlserver_user: { importClassName: 'UserServiceClient', exportClassName: 'SqlServerUserServiceClient' },
    },
    operation: {
        operation: { importClassName: 'OperationServiceClient' },
    },
    organizationmanager: {
        organization: { importClassName: 'OrganizationServiceClient' },
        user: { importClassName: 'UserServiceClient' },
        certificate: { importClassName: 'CertificateServiceClient', exportClassName: 'OmCertificateServiceClient' },
        federation: { importClassName: 'FederationServiceClient' },
    },
    resourcemanager: {
        cloud: { importClassName: 'CloudServiceClient' },
        folder: { importClassName: 'FolderServiceClient' },
    },
    serverless: {
        apigateway: { importClassName: 'ApiGatewayServiceClient' },
        containers_container: { importClassName: 'ContainerServiceClient' },
        functions_function: { importClassName: 'FunctionServiceClient' },
        mdbproxy_proxy: { importClassName: 'ProxyServiceClient' },
        triggers_trigger: { importClassName: 'TriggerServiceClient' },
    },
    vpc: {
        address: { importClassName: 'AddressServiceClient' },
        network: { importClassName: 'NetworkServiceClient' },
        route_table: { importClassName: 'RouteTableServiceClient' },
        security_group: { importClassName: 'SecurityGroupServiceClient' },
        subnet: { importClassName: 'SubnetServiceClient' },
    },
    ydb: {
        backup: { importClassName: 'BackupServiceClient', exportClassName: 'YdbBackupServiceClient' },
        database: { importClassName: 'DatabaseServiceClient', exportClassName: 'YdbDatabaseServiceClient' },
        location: { importClassName: 'LocationServiceClient' },
        resource_preset: { importClassName: 'ResourcePresetServiceClient', exportClassName: 'YdbResourcePresetServiceClient' },
        storage_type: { importClassName: 'StorageTypeServiceClient' },
    },
};
